{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","classNames","completed","title","TodoList","todos","map","findUserById","userId","usersFromServer","find","App","useState","setTitle","setUserId","titleError","setTitleError","userError","setUserError","visibleTodos","setVisibleTodos","onSubmit","event","preventDefault","trim","length","prevState","newTodo","Math","max","p","method","htmlFor","type","value","onChange","target","placeholder","parseInt","disabled","userOption","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9d41ad03.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames(\n        'TodoInfo',\n        {\n          'TodoInfo--completed': todo.completed,\n        },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n      {todo.user && <UserInfo user={todo.user} />}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nfunction findUserById(userId: number): User | undefined {\n  return usersFromServer.find(\n    (user) => (user.id === userId),\n  );\n}\n\nconst todos: Todo[] = todosFromServer.map(\n  (todo) => ({\n    ...todo,\n    user: findUserById(todo.userId),\n  }),\n);\n\nexport const App = () => {\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n  const [titleError, setTitleError] = useState(false);\n  const [userError, setUserError] = useState(false);\n  const [visibleTodos, setVisibleTodos] = useState(todos);\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    setTitleError(title.trim().length === 0);\n    setUserError(userId === 0);\n\n    if (title.trim().length && userId) {\n      setVisibleTodos((prevState) => {\n        const newTodo: Todo = {\n          id: (Math.max(...prevState.map(p => p.id)) + 1),\n          completed: false,\n          userId,\n          title,\n          user: findUserById(userId),\n        };\n\n        return [\n          ...prevState,\n          newTodo,\n        ];\n      });\n\n      setTitle('');\n      setUserId(0);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        onSubmit={handleSubmit}\n        method=\"POST\"\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">\n            {'Title: '}\n          </label>\n\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            name=\"title\"\n            value={title}\n            onChange={\n              (event) => {\n                setTitle(event.target.value);\n                setTitleError(event.target.value.trim().length === 0);\n              }\n            }\n            placeholder=\"Please enter a title\"\n          />\n\n          {\n            titleError\n            && <span className=\"error\">Please enter a title</span>\n          }\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">\n            {'User: '}\n          </label>\n          <select\n            data-cy=\"userSelect\"\n            name=\"user\"\n            value={userId}\n            onChange={(event) => {\n              setUserId(parseInt(event.target.value, 10));\n              setUserError(parseInt(event.target.value, 10) === 0);\n            }}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {\n              usersFromServer.map(\n                (userOption) => (\n                  <option value={userOption.id} key={userOption.id}>\n                    {userOption.name}\n                  </option>\n                ),\n              )\n            }\n          </select>\n\n          {\n            userError\n            && <span className=\"error\">Please choose a user</span>\n          }\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={visibleTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}